
// ================================регистр бухгалтерии================================// 
// =======приходная:
	// регистр ЖурналОпераций 
	Движения.ЖурналОпераций.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		// 41 60 покупка товаров у поставщика
		Движение = Движения.ЖурналОпераций.Добавить();
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет41;
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет60;
		Движение.Период = Дата;
		//Если ЗначениеЗаполнено(ТекСтрокаТовары.НДС) Тогда
			//Процент = "1,"+ СтрЗаменить(ТекСтрокаТовары.НДС, "%","");
		Движение.Сумма = ТекСтрокаТовары.СуммаИтого;
		//Иначе
		//	Движение.Сумма = ТекСтрокаТовары.Сумма;
		//КонецЕсли;
		Движение.Количество = ТекСтрокаТовары.Количество;
		Движение.Комментарий = "Покупка товаров у поставщика";
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Склад] = Склад;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Товар] = ТекСтрокаТовары.Товар;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Поставщик;
		// 41 60 покупка товаров у поставщика 
		
		// 19 60 выделили НДС
		ДвижениеНДС = Движения.ЖурналОпераций.Добавить();
		ДвижениеНДС.СчетДт = ПланыСчетов.Хозрасчетный.Счет19;
		ДвижениеНДС.СчетКт = ПланыСчетов.Хозрасчетный.Счет60;
		ДвижениеНДС.Период = Дата;
		//Если ЗначениеЗаполнено(ТекСтрокаТовары.НДС) Тогда
			//Процент = "0,"+ СтрЗаменить(ТекСтрокаТовары.НДС, "%","");
		ДвижениеНДС.Сумма = ТекСтрокаТовары.СуммаНДС;
		//Иначе
		//	ДвижениеНДС.Сумма = ТекСтрокаТовары.Сумма;
		//КонецЕсли;
		ДвижениеНДС.Количество = ТекСтрокаТовары.Количество;
		ДвижениеНДС.Комментарий = "Выделили НДС";
		ДвижениеНДС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Поставщик;
		ДвижениеНДС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Товар] = ТекСтрокаТовары.Товар;
		ДвижениеНДС.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Поставщик;
		// 19 60 выделили НДС

	КонецЦикла;

// =======расход:
	// регистр ЖурналОпераций 
	Движения.ЖурналОпераций.Записывать = Истина;
	Для Каждого ТекСтрокаСписание Из Списание Цикл
		
		// 90.2 41 Реализован на сторону товар 
		Движение = Движения.ЖурналОпераций.Добавить();
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет90_2;
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет41;
		Движение.Период = Дата;
		Движение.Партия = ТекСтрокаСписание.Партия;
		Движение.Сумма = ТекСтрокаСписание.Сумма;
		Движение.Количество = ТекСтрокаСписание.Количество;
		Движение.Комментарий =  "Реализован на сторону товар с наценкой "+ ЭтотОбъект.Наценка +"%(НДС"+ ТекСтрокаСписание.НДС +"%)";
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Склад] = Склад;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Товар] = ТекСтрокаСписание.Товар;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Покупатель;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склад] = Склад;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Товар] = ТекСтрокаСписание.Товар;
		// 90.2 41 Реализован на сторону товар
		
		ПроцентНаценки = Число("0," + ЭтотОбъект.Наценка);
		СуммаНаценки = ТекСтрокаСписание.Сумма * ПроцентНаценки;
		СуммаСНаценкой = ТекСтрокаСписание.Сумма + СуммаНаценки;
		ВыделенныйНДС = ТекСтрокаСписание.СуммаНДС; 
		СуммаОкончательная = СуммаСНаценкой + ВыделенныйНДС; 
	
		// 90.3 68 Исчислен НДС из суммы с наценкой
		ДвижениеНДС = Движения.ЖурналОпераций.Добавить();
		ДвижениеНДС.СчетДт = ПланыСчетов.Хозрасчетный.Счет90_3;
		ДвижениеНДС.СчетКт = ПланыСчетов.Хозрасчетный.Счет68;
		ДвижениеНДС.Период = Дата;
		ДвижениеНДС.Партия = ТекСтрокаСписание.Партия;
		ДвижениеНДС.Сумма = ВыделенныйНДС; 
		ДвижениеНДС.Количество = ТекСтрокаСписание.Количество;
		ДвижениеНДС.Комментарий =  "Исчислен НДС "+ ТекСтрокаСписание.НДС +" из суммы с наценкой";
		ДвижениеНДС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Склад] = Склад;
		ДвижениеНДС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Товар] = ТекСтрокаСписание.Товар;
		ДвижениеНДС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Покупатель;
		ДвижениеНДС.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Покупатель;
		ДвижениеНДС.НДС = ТекСтрокаСписание.НДС;
		// 90.3 68 Исчислен НДС из суммы с наценкой 
		
		// 62 90.1 Выручка (сумма всего) 
		Движение = Движения.ЖурналОпераций.Добавить();
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет62;
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет90_1;
		Движение.Период = Дата;
		Движение.Партия = ТекСтрокаСписание.Партия;
		Движение.Сумма = СуммаОкончательная;
		Движение.Количество = ТекСтрокаСписание.Количество;
		Движение.Комментарий =  "Выручка";
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Покупатель; 
		
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склад] = Склад;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Товар] = ТекСтрокаСписание.Товар;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Покупатель; 
		// 62 90.1 Выручка (сумма всего)
		
	КонецЦикла;
 
// =======ндс: 
// =======начисление зп в зависимости от вида сотрудника:
		// регистр ЖурналОпераций 
		Движения.ЖурналОпераций.Записывать = Истина;
		Для Каждого ТекСтрокаНачисления Из Начисления Цикл
			Движение = Движения.ЖурналОпераций.Добавить();
			Если ТекСтрокаНачисления.ТипСотрудника = Перечисления.ТипСотрудника.ОсновноеПроизводство Тогда
				// Начисление заработной платы
				Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет20;
				Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет70;
				Движение.Период = Дата;
				Движение.Сумма = ТекСтрокаНачисления.СуммаЗП;
				Движение.Комментарий = "Начисление заработной платы";
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				// Начисление заработной платы
				
				// Отчисление в ПФР - 69.2
				ДвижениеОтчисленийПФР = Движения.ЖурналОпераций.Добавить();
				ДвижениеОтчисленийПФР.СчетДт = ПланыСчетов.Хозрасчетный.Счет20;
				ДвижениеОтчисленийПФР.СчетКт = ПланыСчетов.Хозрасчетный.Счет69_2;
				ДвижениеОтчисленийПФР.Период = Дата;
				ДвижениеОтчисленийПФР.Сумма = ТекСтрокаНачисления.СуммаОтчисленийФЗ;// фз = пфр
				ДвижениеОтчисленийПФР.Комментарий = "Отчисление в ПФР";
				ДвижениеОтчисленийПФР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				ДвижениеОтчисленийПФР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				// Отчисление в ПФР - 69.2
				
				// Отчисление в ФСС - 69.1
				ДвижениеОтчисленийФСС = Движения.ЖурналОпераций.Добавить();
				ДвижениеОтчисленийФСС.СчетДт = ПланыСчетов.Хозрасчетный.Счет20;
				ДвижениеОтчисленийФСС.СчетКт = ПланыСчетов.Хозрасчетный.Счет69_1;
				ДвижениеОтчисленийФСС.Период = Дата;
				ДвижениеОтчисленийФСС.Сумма = ТекСтрокаНачисления.СуммаОтчисленийТранспорт;// транспорт = фсс
				ДвижениеОтчисленийФСС.Комментарий = "Отчисление в ФСС";
				ДвижениеОтчисленийФСС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				ДвижениеОтчисленийФСС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				// Отчисление в ФСС - 69.1
				
			ИначеЕсли ТекСтрокаНачисления.ТипСотрудника = Перечисления.ТипСотрудника.ВспомогательноеПроизводство Тогда
				// Начисление заработной платы
				Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет23;
				Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет70;
				Движение.Период = Дата;
				Движение.Сумма = ТекСтрокаНачисления.СуммаЗП;
				Движение.Комментарий = "Начисление заработной платы";
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				// Начисление заработной платы  
				
				// Отчисление в ПФР - 69.2
				ДвижениеОтчисленийПФР = Движения.ЖурналОпераций.Добавить();
				ДвижениеОтчисленийПФР.СчетДт = ПланыСчетов.Хозрасчетный.Счет23;
				ДвижениеОтчисленийПФР.СчетКт = ПланыСчетов.Хозрасчетный.Счет69_2;
				ДвижениеОтчисленийПФР.Период = Дата;
				ДвижениеОтчисленийПФР.Сумма = ТекСтрокаНачисления.СуммаОтчисленийФЗ;// фз = пфр
				ДвижениеОтчисленийПФР.Комментарий = "Отчисление в ПФР";
				ДвижениеОтчисленийПФР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				ДвижениеОтчисленийПФР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				// Отчисление в ПФР - 69.2
				
				// Отчисление в ФСС - 69.1
				ДвижениеОтчисленийФСС = Движения.ЖурналОпераций.Добавить();
				ДвижениеОтчисленийФСС.СчетДт = ПланыСчетов.Хозрасчетный.Счет23;
				ДвижениеОтчисленийФСС.СчетКт = ПланыСчетов.Хозрасчетный.Счет69_1;
				ДвижениеОтчисленийФСС.Период = Дата;
				ДвижениеОтчисленийФСС.Сумма = ТекСтрокаНачисления.СуммаОтчисленийТранспорт;// транспорт = фсс
				ДвижениеОтчисленийФСС.Комментарий = "Отчисление в ФСС";
				ДвижениеОтчисленийФСС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				ДвижениеОтчисленийФСС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				// Отчисление в ФСС - 69.1
				
			ИначеЕсли ТекСтрокаНачисления.ТипСотрудника = Перечисления.ТипСотрудника.АдминистративноУправленческийПерсонал Тогда
				// Начисление заработной платы
				Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет25;
				Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет70;
				Движение.Период = Дата;
				Движение.Сумма = ТекСтрокаНачисления.СуммаЗП;
				Движение.Комментарий = "Начисление заработной платы";
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				// Начисление заработной платы 
				
				// Отчисление в ПФР - 69.2
				ДвижениеОтчисленийПФР = Движения.ЖурналОпераций.Добавить();
				ДвижениеОтчисленийПФР.СчетДт = ПланыСчетов.Хозрасчетный.Счет25;
				ДвижениеОтчисленийПФР.СчетКт = ПланыСчетов.Хозрасчетный.Счет69_2;
				ДвижениеОтчисленийПФР.Период = Дата;
				ДвижениеОтчисленийПФР.Сумма = ТекСтрокаНачисления.СуммаОтчисленийФЗ;// фз = пфр
				ДвижениеОтчисленийПФР.Комментарий = "Отчисление в ПФР";
				ДвижениеОтчисленийПФР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				ДвижениеОтчисленийПФР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				// Отчисление в ПФР - 69.2
				
				// Отчисление в ФСС - 69.1
				ДвижениеОтчисленийФСС = Движения.ЖурналОпераций.Добавить();
				ДвижениеОтчисленийФСС.СчетДт = ПланыСчетов.Хозрасчетный.Счет25;
				ДвижениеОтчисленийФСС.СчетКт = ПланыСчетов.Хозрасчетный.Счет69_1;
				ДвижениеОтчисленийФСС.Период = Дата;
				ДвижениеОтчисленийФСС.Сумма = ТекСтрокаНачисления.СуммаОтчисленийТранспорт;// транспорт = фсс
				ДвижениеОтчисленийФСС.Комментарий = "Отчисление в ФСС";
				ДвижениеОтчисленийФСС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаНачисления.ТипСотрудника;
				ДвижениеОтчисленийФСС.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаНачисления.Сотрудник;
				// Отчисление в ФСС - 69.1
				
			КонецЕсли;
		КонецЦикла;

// =======выплата зп: 
	// регистр ЖурналОпераций 
	Движения.ЖурналОпераций.Записывать = Истина;
	СчетКт = ПланыСчетов.Хозрасчетный.Счет51;
	Комментарий = "Выдача зарплаты с расчетного счета";
	Если ЭтотОбъект.ВыданоИз = Перечисления.ДенежныеСредства.Касса Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.Счет50;
		Комментарий = "Выдача зарплаты из кассы";
	КонецЕсли;
	Для Каждого ТекСтрокаВыдача Из Выдача Цикл
		Движение = Движения.ЖурналОпераций.Добавить();
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет70;
		Движение.СчетКт = СчетКт;
		Движение.Период = Дата;
		Движение.Сумма = ТекСтрокаВыдача.СуммаЗП;
		Движение.Комментарий = Комментарий;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФИО] = ТекСтрокаВыдача.Сотрудник;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипСотрудника] = ТекСтрокаВыдача.ТипСотрудника;
	КонецЦикла;

// =======оплата поступлений: 
	// регистр ЖурналОпераций 
	Движения.ЖурналОпераций.Записывать = Истина;
	СчетДт = ПланыСчетов.Хозрасчетный.Счет51;
	Комментарий = "Поступление от контрагента на расчетный счет";
	Если ЭтотОбъект.НачисленоВ = Перечисления.ДенежныеСредства.Касса Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.Счет50;
		Комментарий = "Поступление от контрагента в кассу";
	КонецЕсли;
	Движение = Движения.ЖурналОпераций.Добавить();
	Движение.СчетДт = СчетДт;
	Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет62;
	Движение.Период = Дата;
	Движение.Сумма = ЭтотОбъект.Сумма;
	Движение.Комментарий = Комментарий;
	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Сотрудник] = ЭтотОбъект.Ответственный;
	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = ЭтотОбъект.Контрагент;
// =======оплата покупателей нам:
        // регистр ЖурналОпераций 
	Движения.ЖурналОпераций.Записывать = Истина;
	Для Каждого ТекСтрокаОбороты Из Обороты Цикл
		Движение = Движения.ЖурналОпераций.Добавить();
		Движение.Период = Дата;
		Движение.Сумма = ТекСтрокаОбороты.Сумма;
		Если ТекСтрокаОбороты.ТипОперации = Перечисления.ТипОперации.Приход Тогда
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет50;
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет62;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = ТекСтрокаОбороты.ОтКогоКому;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ТипКонрагента] = ТекСтрокаОбороты.ОтКогоКому.ТипКонтрагента;
			Движение.Комментарий = "Приход. Покупатель внес оплату";
		Иначе
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.Счет60;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = ТекСтрокаОбороты.ОтКогоКому;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ТипКонрагента] = ТекСтрокаОбороты.ОтКогоКому.ТипКонтрагента;
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.Счет50;
			Движение.Комментарий = "Расход. Уплачен аванс";
		КонецЕсли;
	КонецЦикла;
// =======покупки: 
// =======перемещение: 
// =======кредиты и займы: 
// =======прибыли убытки:
// ================================регистр бухгалтерии================================// 


// ================================по-среднему================================//
// СПИСАНИЕ ПО СРЕДНЕМУ
&НаСервере
Функция ПолучитьДанныеСреднейЦены(Товар) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ТоварыНаСкладеОбороты.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ТоварыНаСкладеОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	ТоварыНаСкладеОбороты.СуммаПриход / ТоварыНаСкладеОбороты.КоличествоПриход КАК СредняяЦена
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладе.Обороты(
	|			&Дата,
	|			,
	|			,
	|			Товар = &Товар
	|				И Склад = &Склад) КАК ТоварыНаСкладеОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладеОбороты.СуммаПриход / ТоварыНаСкладеОбороты.КоличествоПриход";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.ЗакупочнаяЦена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("Номенклатура", Товар);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Цена; 
	Иначе 
		//Если Выборка.Количество() <> 0 Тогда
		Выборка.Следующий();
		Возврат Выборка.СредняяЦена; 
		//Иначе
		//	Возврат Неопределено;
		//КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции
// СПИСАНИЕ ПО СРЕДНЕМУ



// ================================лифо================================// 
Функция ЗапросЛИФО(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РасходнаяНакладнаяТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ДокТЧ
	|ИЗ
	|	Документ.РасходнаяНакладная.Номенклатура КАК РасходнаяНакладнаяТовары
	|ГДЕ
	|	РасходнаяНакладнаяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ДокТЧ.Количество КАК Количество,
	|	ТоварыНаСкладеОстатки.Партия КАК Партия,
	|	ЕСТЬNULL(ТоварыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ТоварыНаСкладеОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ВТ_ДокТЧ КАК ВТ_ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладе.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТ_ДокТЧ.Номенклатура КАК Номенклатура
	|						ИЗ
	|							ВТ_ДокТЧ КАК ВТ_ДокТЧ)) КАК ТоварыНаСкладеОстатки
	|		ПО ВТ_ДокТЧ.Номенклатура = ТоварыНаСкладеОстатки.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыНаСкладеОстатки.Партия.Дата УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(Количество)
	|ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("МоментВремени",  Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("Склад", Ссылка.Склад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
КонецФункции




///////////////////////////МОДУЛЬ ОБЪЕКТА (ДОКУМЕНТ РАСХОДНАЯ НАКЛАДНАЯ)
Перем Сообщение;

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ЕстьОтказ = Ложь;
	Результат = Неопределено;
	Движения.ТоварыНаСкладе.Записать();	
	Движения.ТоварыНаСкладе.Записывать = Истина;
		
	Если ЭтотОбъект.МетодСписания = Перечисления.МетодСписания.ФИФО Тогда
		Результат = ОбщийМодульДляВыбораМетодаСписания.ЗапросФИФО(Ссылка);
		Сообщение = "Списание партий по правилу ФИФО прошло успешно!";
	ИначеЕсли ЭтотОбъект.МетодСписания = Перечисления.МетодСписания.ЛИФО Тогда
		Результат = ОбщийМодульДляВыбораМетодаСписания.ЗапросЛИФО(Ссылка);
		Сообщение = "Списание партий по правилу ЛИФО прошло успешно!";
	КонецЕсли;
	
	ВыборкаТовар = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТовар.Следующий() Цикл
		
		ВыборкаДетальнаяЗапись = ВыборкаТовар.Выбрать();
		ОсталосьСписать = ВыборкаТовар.Количество;
		ВсегоТовара = 0; 
		
		Пока ВыборкаДетальнаяЗапись.Следующий() и ОсталосьСписать > 0 Цикл
			
			ВсегоТовара = ВсегоТовара + ВыборкаДетальнаяЗапись.КоличествоОстаток; 
			
			Движение = Движения.ТоварыНаСкладе.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Номенклатура = ВыборкаДетальнаяЗапись.Номенклатура;
			Движение.Склад = Склад; 
			Движение.Партия = ВыборкаДетальнаяЗапись.Партия;
			Движение.Количество = МИН(ОсталосьСписать, ВыборкаДетальнаяЗапись.КоличествоОстаток);
			
			Если Движение.Количество = ВыборкаДетальнаяЗапись.КоличествоОстаток Тогда
				Движение.Сумма = ВыборкаДетальнаяЗапись.СуммаОстаток;
			Иначе
				Движение.Сумма = Движение.Количество / ВыборкаДетальнаяЗапись.КоличествоОстаток * ВыборкаДетальнаяЗапись.СуммаОстаток; 
			КонецЕсли;
			
			ОсталосьСписать = ОсталосьСписать - Движение.Количество; 
			
		КонецЦикла;
		
		Если ОсталосьСписать > 0 Тогда
			Сообщить("Реализация невозможна! Требуемое количество Номенклатуры: '" 
			+ ВыборкаТовар.Номенклатура + "' - " + ВыборкаТовар.Количество 
			+ " шт.; На складе '" + Склад +"': " 
			+ ВсегоТовара + " шт.");
			ЕстьОтказ = Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ЕстьОтказ = Ложь Тогда
		Сообщить(Сообщение); 
	КонецЕсли;
	
	Отказ = ЕстьОтказ;
КонецПроцедуры

// ================================фифо================================//

Функция ЗапросФИФО(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходнаяНакладнаяТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РасходнаяНакладнаяТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ДокТЧ
	|ИЗ
	|	Документ.РасходнаяНакладная.Номенклатура КАК РасходнаяНакладнаяТовары
	|ГДЕ
	|	РасходнаяНакладнаяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ДокТЧ.Количество КАК Количество,
	|	ТоварыНаСкладеОстатки.Партия КАК Партия,
	|	ЕСТЬNULL(ТоварыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ТоварыНаСкладеОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ВТ_ДокТЧ КАК ВТ_ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладе.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТ_ДокТЧ.Номенклатура КАК Номенклатура
	|						ИЗ
	|							ВТ_ДокТЧ КАК ВТ_ДокТЧ)) КАК ТоварыНаСкладеОстатки
	|		ПО ВТ_ДокТЧ.Номенклатура = ТоварыНаСкладеОстатки.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыНаСкладеОстатки.Партия.Дата
	|ИТОГИ
	|	МАКСИМУМ(Количество)
	|ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("МоментВремени",  Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("Склад", Ссылка.Склад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
КонецФункции

// ================================Проверка чтоб не удаляли чо не надо================================//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтотОбъект.Проведен и ЭтотОбъект.ПометкаУдаления = Истина И Итиль_ОбщийМодуль.ПроверитьНаличиеОперацийСТакойБронью(ЭтотОбъект.Ссылка) = Истина Тогда 
		Сообщить("По данной брони уже были операции, нельзя пометить на удаление!!");
		Отказ = Истина;
	ИначеЕсли ЭтотОбъект.Проведен И Итиль_ОбщийМодуль.ПроверитьНаличиеОперацийСТакойБронью(ЭтотОбъект.Ссылка) = Истина Тогда 
		Сообщить("По данной брони уже были операции, нельзя изменить или отменить проведение!!");
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
КонецПроцедуры 



// ================================ввод на основании================================//

/ ОбщийМодуль ВводНаОсновании:
Функция ПолучитьПодчиненныйДокумент(Основание, ТекДокумент) Экспорт
	ИмяДокумента = ТекДокумент.Метаданные().Имя;
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодчиненныйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ПодчиненныйДокумент
	|ГДЕ
	|	ПодчиненныйДокумент.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Возврат Результат.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	Если  СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ОплатаТоваров") Тогда
		Объект = Форма.Объект;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ДанныеДокумента = ВводНаОсновании.ПолучитьПодчиненныйДокумент(Объект.ДокументОснование, Объект.Ссылка);
	        Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ДанныеДокумента) Тогда
	            Форма.ЗначениеВРеквизитФормы(ДанныеДокумента.ПолучитьОбъект(), "Объект");
	        КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// Оплата
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		// Заполнение шапки
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		Поставщик = ДанныеЗаполнения.Поставщик;
		Сумма = ДанныеЗаполнения.Товары.Итог("Итого");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры 

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	ТЧ = Итиль_ОбщийМодуль.ПолучитьТЧДокументаОснования(Объект.ДокументОснование);
	Если ТЧ <> Неопределено Тогда
		Объект.Заявки.Загрузить(ТЧ); 
	Иначе
		Сообщить("Табличная часть документа основания не найдена!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьТЧДокументаОснования(ДокументОснования) Экспорт
	
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.Итиль_ЗаявкиКлиентов") Тогда
		ТЧ = ДокументОснования.Заявка.Выгрузить();		
	ИначеЕсли ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.Итиль_Бронирование") Тогда
		ТЧ = ДокументОснования.Заявки.Выгрузить();		
	//ИначеЕсли ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.Итиль_ОплатаПутевки") Тогда
	КонецЕсли;	
	
	Если ТЧ.Количество()>0 Тогда 
		Возврат ТЧ;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции 



// ================================контроль остатков================================//

// Контроль остатка товаров в разрезе складов 
&НаСервере
Функция ПроверитьОстаткиТоваров()
	
	тзТовары = ЭтотОбъект.Списание.Выгрузить();
	тзТовары.Свернуть("Товар", "Количество");
	
	Для каждого Товар из тзТовары Цикл	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДвиженияТоваровОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладе.Остатки(
		|			&Дата,
		|			Товар = &Товар
		|				И Склад = &Склад) КАК ДвиженияТоваровОстатки";
		Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
		Запрос.УстановитьПараметр("Товар", Товар.Товар);
		Запрос.УстановитьПараметр("Склад", ЭтотОбъект.Склад);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Количество() = 0 Тогда
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоОстаток < Товар.Количество Тогда
					Сообщить("Не хватает "+ Строка(Товар.Количество - Выборка.КоличествоОстаток) + " шт. товара " + Товар.Товар + " на складе " + ЭтотОбъект.Склад);
					Возврат Ложь;
				КонецЕсли; 
				Если Выборка.КоличествоОстаток = 0 Тогда
					Сообщить("Остаток " + Товар.Товар + " товара = 0 на складе " + ЭтотОбъект.Склад);
					Возврат Ложь;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			Сообщить("Товар " + Товар.Товар + " никогда не поступал на склад " + ЭтотОбъект.Склад);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции 
// Контроль остатка товаров в разрезе складов 



// ================================контроль нормы================================//
 Функция СуммаПродажДляНачисленияПремии(Сотрудник, ПредыдущийМесяцНачало, ПредыдущийМесяцКонец) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ТоварыНаСкладеОбороты.СуммаРасход + ТоварыНаСкладеОбороты.СуммаНДСРасход) КАК СуммаПродаж
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладе.Обороты(&Начало, &Конец, Регистратор, ) КАК ТоварыНаСкладеОбороты
	|ГДЕ
	|	ТоварыНаСкладеОбороты.Регистратор.Ответственный = &Ответственный";
	
	Запрос.УстановитьПараметр("Начало", ПредыдущийМесяцНачало);
	Запрос.УстановитьПараметр("Конец", ПредыдущийМесяцКонец);
	Запрос.УстановитьПараметр("Ответственный", Сотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() <> 0 Тогда
		Пока Выборка.Следующий() Цикл
			
			Возврат Выборка.СуммаПродаж;
			
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции 

Функция ПолучитьНормуЗаПредыдущийМесяц(Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыПродажЗаМесяцСрезПоследних.НормаПродаж КАК НормаПродаж
	|ИЗ
	|	РегистрСведений.НормыПродажЗаМесяц.СрезПоследних(&Дата, ) КАК НормыПродажЗаМесяцСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() <> 0 Тогда
		Пока Выборка.Следующий() Цикл
			
			Возврат Выборка.НормаПродаж;
			
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 



// ================================скидка покупателю================================//

// СКИДКА 
&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	СкидкаПроцент = ПроверитьВозможностьСкидкиУПокупателя(Объект.Покупатель);
	// СКИДКА ПЕРЕСЧЕТ ТЧ!!!!!!
	Если СкидкаПроцент <> 0 и СкидкаПроцент <> Неопределено Тогда
		
		Скидка = Число(СтрЗаменить(СкидкаПроцент, "%", ""));
		
		Для каждого СтрТЧ из Объект.Списание Цикл
			СтрТЧ.Цена = СтрТЧ.Цена * (100 - Скидка)/100;	
		КонецЦикла;
	Иначе
		Сообщить("У контрагента нет предыдущих покупок или сумма покупок недостаточна для скидки");
	КонецЕсли;
	// СКИДКА ПЕРЕСЧЕТ ТЧ!!!!!!
КонецПроцедуры
// СКИДКА

// СКИДКА
&НаСервере
Функция ПроверитьВозможностьСкидкиУПокупателя(Покупатель)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ТоварыНаСкладеОбороты.СуммаРасход) КАК СуммаПокупок
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладе.Обороты(&НачалоГода, &Дата, Регистратор, ) КАК ТоварыНаСкладеОбороты
	|ГДЕ
	|	ТоварыНаСкладеОбороты.Регистратор.Покупатель = &Покупатель");
	
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Объект.Дата)); 
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Покупатель", Объект.Покупатель);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СуммаПокупок = Выборка.СуммаПокупок;		
		Если ЗначениеЗаполнено(СуммаПокупок) Тогда
			ЗапросСкидка = Новый Запрос(
				"ВЫБРАТЬ
				|	УсловияСкидкиСрезПоследних.Скидка КАК Скидка,
				|	УсловияСкидкиСрезПоследних.СуммаДляСкидки КАК СуммаДляСкидки
				|ИЗ
				|	РегистрСведений.УсловияСкидки.СрезПоследних(&Дата, СуммаДляСкидки <= &СуммаПокупок) КАК УсловияСкидкиСрезПоследних
				|
				|УПОРЯДОЧИТЬ ПО
				|	СуммаДляСкидки");
			ЗапросСкидка.УстановитьПараметр("Дата", Объект.Дата);
			ЗапросСкидка.УстановитьПараметр("СуммаПокупок", СуммаПокупок); 
			ТЗ = ЗапросСкидка.Выполнить().Выгрузить();
			Если ТЗ.Количество() <> 0 Тогда
				Для Сч = 0 по ТЗ.Количество()-1 Цикл 
					Если НЕ Сч = ТЗ.Количество()-1 Тогда 
						Если ТЗ[Сч].СуммаДляСкидки <= СуммаПокупок И СуммаПокупок <	ТЗ[Сч+1].СуммаДляСкидки Тогда
							Возврат ТЗ[Сч].Скидка;
						КонецЕсли;
					Иначе
						Если СуммаПокупок >= ТЗ[Сч].СуммаДляСкидки Тогда
							Возврат ТЗ[Сч].Скидка;
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;
			Иначе 
				Возврат 0;
			КонецЕсли;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;

	
КонецФункции 
// СКИДКА 




// ================================модуль объекта начисление зп================================//

Процедура ОбработкаПроведения (Отказ, Режим)
	// регистр Основныеначисления
	Для Каждого ТекСтрокаНачисления Из Начисления Цикл
		Движение = Движения.ОсновныеНачисления.Добавить();
		Движение.Сторно = Ложь;
		Движение.Регистратор = Ссылка;
		Движение.ВидРасчета = ТекСтрокаНачисления. ВидРасчета;
		Движение.ПериодДействияНачало = ТекСтрокаНачисления.ДатаНачала;
		Движение.ПериодДействияКонец = ТекСтрокаНачисления.ДатаОкончания;
		Движение.ПериодРегистрации = ПериодРегистрации;
		Движение.БазовыйпериодНачало = Началодня(ТекСтрокаНачисления.ДатаНачала);
		Движение.БазовыйПериодКонец = КонецДня(ТекСтрокаНачисления.ДатаОкончания);
		Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
		Движение.Результат = 0;
		Движение.ИсходныеДанные = ТекСтрокаНачисления.ВеличинаНачисления;
		//Если ТекСтрокаНачисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Невыход Тогда
		//	Движение.Результат = 0;
		//КонецЕсли;
		Движение.ПрименениеПремии = Ложь;	
	КонецЦикла;
	// регистр ОсновныеУдержания
	Для Каждого ТекСтрокаУдержания Из Удержания Цикл
		Движение = Движения.Удержания.Добавить();
		Движение.Сторно = Ложь;
		Движение.Регистратор = Ссылка;
		Движение.ВидРасчета = ТекСтрокаУдержания.ВидРасчета;
		Движение.ПериодРегистрации = ПериодРегистрации;
		Движение.БазовыйПериодНачало = НачалоДня(ТекСтрокаУдержания.ДатаНачала);
		Движение.БазовыйПериодКонец = Конецдня(ТекСтрокаУдержания.ДатаОкончания);
		Движение.Сотрудник = ТекСтрокаУдержания.Сотрудник;
		Движение.Результат = 0;
		Движение.ИсходныеДанные = ТекСтрокаУдержания.ИзначальнаяВеличина;
	КонецЦикла;
	Движения.ОсновныеНачисления.Записать();
	Движения.Удержания.Записать();
	
	СотрудникиНачисления = ЭтотОбъект.Начисления.ВыгрузитьКолонку("Сотрудник");
	СотрудникиУдержания = ЭтотОбъект.Удержания.ВыгрузитьКолонку("Сотрудник"); 
	ТЧ = ЭтотОбъект.Начисления.Выгрузить();
	Если ПроверитьНаПересечениеПериодовНачислений(СотрудникиНачисления, ТЧ) = Истина ИЛИ  ПроверитьНаПересечениеПериодовУдержаний(СотрудникиУдержания, ТЧ) = Истина ИЛИ ПроверитьНаПересечениеПериодовНачисленийТЧ()=Истина ИЛИ ПроверитьНаПересечениеПериодовУдержанийТЧ() = Истина Тогда 
		Сообщить("Проверьте периоды начислений и удержаний!");
		Отказ = Истина;
	Иначе 
		// НАЧИСЛЕНИЯ	
		РассчитатьНачисления(Движения.ОсновныеНачисления, ПланыВидовРасчета.ОсновныеНачисления.Оклад);
		РассчитатьНачисления(Движения.ОсновныеНачисления, ПланыВидовРасчета.ОсновныеНачисления.Премия);
		// УДЕРЖАНИЯ
		РассчитатьУдержания(Движения.Удержания, ПланыВидовРасчета.Удержания.НДФЛ);
	КонецЕсли;
	
КонецПроцедуры 

// Проверяет ТЧ на наличие пересекающихся периодов начислений/удержаний
Функция ПроверитьНаПересечениеПериодовУдержаний(СписокСотрудников, ТЧ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	| Удержания.ВидРасчета КАК ВидРасчета,
	| Удержания.БазовыйПериодНачало КАК БазовыйПериодНачало,
	| Удержания.БазовыйПериодКонец КАК БазовыйПериодКонец,
	| Удержания.Сотрудник КАК Сотрудник,
	| Удержания.НомерСтроки КАК НомерСтроки,
	| Удержания.Регистратор КАК Регистратор
	|ИЗ
	| РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	| Удержания.Сотрудник В(&Сотрудник)
	| И Удержания.Регистратор <> &Регистратор";
	Запрос.УстановитьПараметр("Сотрудник",СписокСотрудников);
	Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если Не ТЗ.Количество() = 0 Тогда
		Для Каждого Стр из ТЗ Цикл
			ДатаНачала = Стр.БазовыйПериодНачало;
			ДатаОкончания = Стр.БазовыйПериодКонец;
			Пересекаются = Ложь;
			Отбор = Новый Структура("Сотрудник");
			Отбор.Сотрудник = Стр.Сотрудник;
			ТЗ2 = ТЧ.НайтиСтроки(Отбор);
			Для Каждого Стр2 из ТЗ2 Цикл
				Если Стр.ВидРасчета = Стр2.ВидРасчета Тогда
					Если Стр2.ДатаНачала >= ДатаНачала Тогда
						Если ДатаОкончания >= Стр2.ДатаНачала Тогда
							Пересекаются = Истина;
						КонецЕсли;
					Иначе
						Если Стр2.ДатаОкончания >= ДатаНачала И Стр2.ДатаНачала <= ДатаНачала Тогда
							Пересекаются = Истина;
						КонецЕсли;
					КонецЕсли;
					Если Пересекаются = Истина Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Проверяет ТЧ на наличие пересекающихся периодов начислений/удержаний
Функция ПроверитьНаПересечениеПериодовНачислений(Сотрудники, ТЧ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сотрудник.Код КАК СотрудникКод,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник В(&Сотрудники)
	|	И Начисления.Регистратор <> &Регистратор";
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники); 
	Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
	ТЗ = Запрос.Выполнить().Выгрузить();
	// от этой тз найти по сотруднику и по виду расчета дальше проверка дат
	Если Не ТЗ.Количество() = 0 Тогда
		Для Каждого Стр из ТЗ Цикл
			ДатаНачала = Стр.ПериодДействияНачало;
			ДатаОкончания = Стр.ПериодДействияКонец;
			Пересекаются = Ложь;
			Отбор = Новый Структура("Сотрудник");
			Отбор.Сотрудник = Стр.Сотрудник;
			ТЗ2 = ТЧ.НайтиСтроки(Отбор); 
			// ПРОВЕРЯЮТСЯ ВСЕ ДОКУМЕНТЫ 
			Для Каждого Стр2 из ТЗ2 Цикл
				Если Стр.ВидРасчета = Стр2.ВидРасчета Тогда
					Если Стр2.ДатаНачала >= ДатаНачала Тогда
						Если ДатаОкончания >= Стр2.ДатаНачала Тогда
							Пересекаются = Истина;
						КонецЕсли;
					Иначе
						Если Стр2.ДатаОкончания >= ДатаНачала И Стр2.ДатаНачала <= ДатаНачала Тогда
							Пересекаются = Истина;
						КонецЕсли;
					КонецЕсли;
					Если Пересекаются = Истина Тогда 
						Возврат Истина;// пересечения есть	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;// пересечений нет	
	
КонецФункции 


Процедура РассчитатьНачисления(НаборДвижений, ВидРасчета)
	
	Если ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад Тогда
		КолвоБуднихДней = 0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КолвоБуднихДней
		|ИЗ
		|	РегистрСведений.График КАК График
		|ГДЕ
		|	График.Дата >= &Начало
		|	И График.Дата <= &Конец
		|	И График.Значение <> 0" ;
		ЗапросНевыход = Новый Запрос;
		ЗапросНевыход.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Результат КАК Результат,
		|	ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	РАЗНОСТЬДАТ(ОсновныеНачисления.ПериодДействияКонец, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) КАК Разность
		|ПОМЕСТИТЬ ВТ_СВыходными
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисления КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисления.Невыход)
		|	И ОсновныеНачисления.Сотрудник = &Сотрудник
		|	И ОсновныеНачисления.ПериодДействияНачало >= &Начало
		|	И ОсновныеНачисления.ПериодДействияКонец <= &Конец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КолвоБуднихДней
		|ИЗ
		|	ВТ_СВыходными КАК ВТ_СВыходными,
		|	РегистрСведений.График КАК График
		|ГДЕ
		|	График.Дата >= ВТ_СВыходными.ПериодДействияНачало
		|	И График.Дата <= ВТ_СВыходными.ПериодДействияКонец
		|	И График.Значение <> 0" ;
		
		Для Каждого Движение из НаборДвижений Цикл 
			Если Движение.ВидРасчета = ВидРасчета Тогда
				
				Сотрудник = Движение.Сотрудник;
				Начало = Движение.ПериодДействияНачало;
				Конец = Движение.ПериодДействияКонец;
				СуммаЧасов = 0; 
				ЗапросНевыход.УстановитьПараметр("Сотрудник",Сотрудник);
				ЗапросНевыход.УстановитьПараметр("Начало",Начало);
				ЗапросНевыход.УстановитьПараметр("Конец",Конец);    
				Запрос.УстановитьПараметр("Начало",НачалоМесяца(Начало));
				Запрос.УстановитьПараметр("Конец",КонецМесяца(Конец));    
				Выборка = Запрос.Выполнить().Выбрать();  
				Если Выборка.Следующий() Тогда
					КолвоБуднихДней = Выборка.КолвоБуднихДней;
				КонецЕсли;
				
				ВыборкаНевыход = ЗапросНевыход.Выполнить().Выбрать();
				Если ВыборкаНевыход.Следующий() = Ложь Тогда // нет невыхода
					ПредварительныйРезультат = Движение.ИсходныеДанные;
				Иначе // был невыход
					Запрос.УстановитьПараметр("Начало",Начало);
					Запрос.УстановитьПараметр("Конец",Конец);    
					Выборка = Запрос.Выполнить().Выбрать();  
					Выборка.Следующий();
					
					КолвоБуднихДнейОтработанных = Выборка.КолвоБуднихДней - ВыборкаНевыход.КолвоБуднихДней;
					ПредварительныйРезультат = Движение.ИсходныеДанные/КолвоБуднихДней * КолвоБуднихДнейОтработанных;
				КонецЕсли;
				Движение.Результат = ПредварительныйРезультат;
			КонецЕсли;	
		КонецЦикла;
	//КонецЕсли;	
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Премия Тогда
		Для Каждого Движение из НаборДвижений Цикл 
			Если Движение.ВидРасчета = ВидРасчета Тогда
				Ресурсы = Новый Массив(1);
				Ресурсы.Установить(0, "ОсновныеНачисления.Результат");
				Измерения = Новый Структура("Сотрудник", "ОсновныеНачисления.Сотрудник");
				//Для Каждого Движение из НаборДвижений Цикл
				//	Если Движение.ВидРасчета = ВидРасчета Тогда
				БазаРасчета = Движение.ПолучитьБазу(Ресурсы, Измерения);
				ПредыдущийМесяцНачало = НачалоМесяца(НачалоМесяца(Движение.ПериодДействияНачало)-1);
				ПредыдущийМесяцКонец = НачалоДня(НачалоМесяца(Движение.ПериодДействияНачало)-1);
				СуммаПродажПоСотрудникуЗаПредыдущийМесяц = ОбщийМодульРасчетПремий.СуммаПродажДляНачисленияПремии(Движение.Сотрудник, ПредыдущийМесяцНачало, ПредыдущийМесяцКонец);
				Если СуммаПродажПоСотрудникуЗаПредыдущийМесяц <> Неопределено Тогда
					НормаПродаж = ОбщийМодульРасчетПремий.ПолучитьНормуЗаПредыдущийМесяц(ПредыдущийМесяцКонец);
					Если НормаПродаж <> Неопределено Тогда
						Если СуммаПродажПоСотрудникуЗаПредыдущийМесяц >= НормаПродаж Тогда // есть возможность премии
							ПремияСумма = 0;
							
							Если СуммаПродажПоСотрудникуЗаПредыдущийМесяц >= НормаПродаж * 2 Тогда 
								ПремияСумма = 0.5 * БазаРасчета.Получить(0).Результат;
								Движение.ПроцентПремии = 50;	
							ИначеЕсли СуммаПродажПоСотрудникуЗаПредыдущийМесяц >= НормаПродаж * 1.75 Тогда
								ПремияСумма = 0.3 * БазаРасчета.Получить(0).Результат;
								Движение.ПроцентПремии = 30;	
							ИначеЕсли СуммаПродажПоСотрудникуЗаПредыдущийМесяц >= НормаПродаж * 1.5 Тогда 
								ПремияСумма = 0.2 * БазаРасчета.Получить(0).Результат;
								Движение.ПроцентПремии = 20;	
							КонецЕсли;
							
							Если ПремияСумма <> 0 Тогда
								Движение.ПрименениеПремии = Истина;	
							КонецЕсли;
							
							Движение.Результат = ПремияСумма;
						Иначе
							Движение.Результат = 0;	
						КонецЕсли;
					Иначе
						Движение.Результат = 0;
						Сообщить("Норма не установлена");
					КонецЕсли;
				Иначе 
					Сообщить("У сотрудника " + Движение.Сотрудник + " нет продаж");
					Движение.Результат = 0;
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;
		
		
	КонецЕсли;
	
	Если НаборДвижений.Модифицированность() Тогда
		НаборДвижений.Записать(, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьУдержания(НаборДвижений, ВидРасчета)
	// НДФЛ
	Если ВидРасчета = ПланыВидовРасчета.Удержания.НДФЛ Тогда
		Ресурсы = Новый Массив(1);
		Ресурсы.Установить(0, "ОсновныеНачисления.Результат");
		Измерения = Новый Структура("Сотрудник", "ОсновныеНачисления.Сотрудник");
		Для Каждого Движение из НаборДвижений Цикл
			Если Движение.ВидРасчета = ВидРасчета Тогда
				БазаРасчета = Движение.ПолучитьБазу(Ресурсы, Измерения);
				Движение.Результат = Движение.ИсходныеДанные * БазаРасчета.Получить(0).Результат;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если НаборДвижений.Модифицированность() Тогда
		НаборДвижений.Записать(, Истина);
	КонецЕсли;
КонецПроцедуры

// Проверяет ТЧ на наличие пересекающихся периодов начислений/удержаний

Функция ПроверитьНаПересечениеПериодовНачисленийТЧ()
	ТЗ = ЭтотОбъект.Начисления.Выгрузить();
	Если Не ТЗ.Количество() = 0 Тогда
		Для Каждого Стр из ТЗ Цикл
			ДатаНачала = Стр.ДатаНачала;
			ДатаОкончания = Стр.ДатаОкончания;
			Пересекаются = Ложь; 
			Отбор = Новый Структура("Сотрудник");
			Отбор.Сотрудник = Стр.Сотрудник;
			ТЗ2 = ТЗ.НайтиСтроки(Отбор); 
			Для Каждого Стр2 из ТЗ2 Цикл
				// ПРОВЕРЯЕТСЯ ТОЛЬКО ТЕКУЩИЙ ДОКУМЕНТ
				Если Стр.НомерСтроки <> Стр2.НомерСтроки Тогда
					Если Стр.ВидРасчета = Стр2.ВидРасчета Тогда
						Если Стр2.ДатаНачала >= ДатаНачала Тогда
							Если ДатаОкончания >= Стр2.ДатаНачала Тогда
								Пересекаются = Истина;
							КонецЕсли;
						Иначе
							Если Стр2.ДатаОкончания >= ДатаНачала И Стр2.ДатаНачала <= ДатаНачала Тогда
								Пересекаются = Истина;
							КонецЕсли;
						КонецЕсли;
						Если Пересекаются = Истина Тогда 
							Возврат Истина;// пересечения есть	
						КонецЕсли;
					КонецЕсли;  
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;//пересечений нет	
	
КонецФункции 

// Проверяет ТЧ на наличие пересекающихся периодов начислений/удержаний

Функция ПроверитьНаПересечениеПериодовУдержанийТЧ()
	ТЗ = ЭтотОбъект.Удержания.Выгрузить();
	Если Не ТЗ.Количество() = 0 Тогда
		Для Каждого Стр из ТЗ Цикл
			ДатаНачала = Стр.ДатаНачала;
			ДатаОкончания = Стр.ДатаОкончания;
			Пересекаются = Ложь; 
			Отбор = Новый Структура("Сотрудник");
			Отбор.Сотрудник = Стр.Сотрудник;
			ТЗ2 = ТЗ.НайтиСтроки(Отбор); 
			Для Каждого Стр2 из ТЗ2 Цикл
				// ПРОВЕРЯЕТСЯ ТОЛЬКО ТЕКУЩИЙ ДОКУМЕНТ
				Если Стр.НомерСтроки <> Стр2.НомерСтроки Тогда
					Если Стр.ВидРасчета = Стр2.ВидРасчета Тогда
						Если Стр2.ДатаНачала >= ДатаНачала Тогда
							Если ДатаОкончания >= Стр2.ДатаНачала Тогда
								Пересекаются = Истина;
							КонецЕсли;
						Иначе
							Если Стр2.ДатаОкончания >= ДатаНачала И Стр2.ДатаНачала <= ДатаНачала Тогда
								Пересекаются = Истина;
							КонецЕсли;
						КонецЕсли;
						Если Пересекаются = Истина Тогда 
							Возврат Истина;// пересечения есть	
						КонецЕсли;
					КонецЕсли;  
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;//пересечений нет	
	
КонецФункции 





// ================================ОСВ================================//
ВЫБРАТЬ
	ЕСТЬNULL(СУММА(ДвиженияТоваровОбороты.КоличествоПриход), 0) КАК НКол,
	ЕСТЬNULL(СУММА(ДвиженияТоваровОбороты.СуммаПриход), 0) КАК НСум,
	ДвиженияТоваровОбороты.Товар КАК Товар
ПОМЕСТИТЬ ВТ_НачОстатки
ИЗ
	РегистрНакопления.ДвиженияТоваров.Обороты(, &Начало, Регистратор, ) КАК ДвиженияТоваровОбороты

СГРУППИРОВАТЬ ПО
	ДвиженияТоваровОбороты.Товар
;
////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ЕСТЬNULL(СУММА(ДвиженияТоваровОбороты.КоличествоПриход), 0) КАК ПКол,
	ЕСТЬNULL(СУММА(ДвиженияТоваровОбороты.СуммаПриход), 0) КАК ПСум,
	ДвиженияТоваровОбороты.Товар КАК Товар
ПОМЕСТИТЬ ВТ_Приход
ИЗ
	РегистрНакопления.ДвиженияТоваров.Обороты(&Начало, &Конец, Регистратор, ) КАК ДвиженияТоваровОбороты

СГРУППИРОВАТЬ ПО
	ДвиженияТоваровОбороты.Товар
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ЕСТЬNULL(СУММА(ДвиженияТоваровОбороты.КоличествоРасход), 0) КАК РКол,
	ЕСТЬNULL(СУММА(ДвиженияТоваровОбороты.СуммаРасход), 0) КАК РСум,
	ДвиженияТоваровОбороты.Товар КАК Товар
ПОМЕСТИТЬ ВТ_Расход
ИЗ
	РегистрНакопления.ДвиженияТоваров.Обороты(&Начало, &Конец, Регистратор, ) КАК ДвиженияТоваровОбороты

СГРУППИРОВАТЬ ПО
	ДвиженияТоваровОбороты.Товар
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВЫБОР
		КОГДА ВТ_НачОстатки.Товар ЕСТЬ NULL
			ТОГДА ВТ_Приход.Товар
		ИНАЧЕ ВТ_НачОстатки.Товар
	КОНЕЦ КАК Товар,
	ЕСТЬNULL(ВТ_НачОстатки.НКол, 0) КАК НКол,
	ЕСТЬNULL(ВТ_НачОстатки.НСум, 0) КАК НСум,
	ЕСТЬNULL(ВТ_Приход.ПКол, 0) КАК ПКол,
	ЕСТЬNULL(ВТ_Приход.ПСум, 0) КАК ПСум,
	ЕСТЬNULL(ВТ_Расход.РКол, 0) КАК РКол,
	ЕСТЬNULL(ВТ_Расход.РСум, 0) КАК РСум,
	ВЫБОР
		КОГДА НЕ ЕСТЬNULL(ВТ_Приход.ПКол, 0) = 0
				И НЕ ЕСТЬNULL(ВТ_Расход.РКол, 0) = 0
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НКол, 0) + ВТ_Приход.ПКол - ВТ_Расход.РКол
		КОГДА ВТ_Приход.ПКол ЕСТЬ NULL
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НКол, 0) - ЕСТЬNULL(ВТ_Расход.РКол, 0)
		КОГДА НЕ ЕСТЬNULL(ВТ_Приход.ПКол, 0) = 0
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НКол, 0) + ВТ_Приход.ПКол - ЕСТЬNULL(ВТ_Расход.РКол, 0)
		КОГДА ВТ_Расход.РКол ЕСТЬ NULL
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НКол, 0) + ЕСТЬNULL(ВТ_Приход.ПКол, 0)
		КОГДА НЕ ЕСТЬNULL(ВТ_Расход.РКол, 0) = 0
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НКол, 0) + ЕСТЬNULL(ВТ_Приход.ПКол, 0) - ВТ_Расход.РКол
		КОГДА ВТ_Приход.ПКол ЕСТЬ NULL
				И ВТ_Расход.РКол ЕСТЬ NULL
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НКол, 0)
	КОНЕЦ КАК ККол,
	ВЫБОР
		КОГДА НЕ ЕСТЬNULL(ВТ_Приход.ПСум, 0) = 0
				И НЕ ЕСТЬNULL(ВТ_Расход.РСум, 0) = 0
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НСум, 0) + ВТ_Приход.ПСум - ВТ_Расход.РСум
		КОГДА ВТ_Приход.ПСум ЕСТЬ NULL
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НСум, 0) - ЕСТЬNULL(ВТ_Расход.РСум, 0)
		КОГДА НЕ ЕСТЬNULL(ВТ_Приход.ПСум, 0) = 0
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НСум, 0) + ВТ_Приход.ПСум - ЕСТЬNULL(ВТ_Расход.РСум, 0)
		КОГДА ВТ_Расход.РСум ЕСТЬ NULL
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НСум, 0) + ЕСТЬNULL(ВТ_Приход.ПСум, 0)
		КОГДА НЕ ЕСТЬNULL(ВТ_Расход.РСум, 0) = 0
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НСум, 0) + ЕСТЬNULL(ВТ_Приход.ПСум, 0) - ВТ_Расход.РСум
		КОГДА ВТ_Приход.ПСум ЕСТЬ NULL
				И ВТ_Расход.РСум ЕСТЬ NULL
			ТОГДА ЕСТЬNULL(ВТ_НачОстатки.НСум, 0)
	КОНЕЦ КАК КСум
ИЗ
	ВТ_НачОстатки КАК ВТ_НачОстатки
		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
		ПО (ВТ_НачОстатки.Товар = ВТ_Приход.Товар)
		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Расход КАК ВТ_Расход
		ПО ((ВТ_НачОстатки.Товар = ВТ_Расход.Товар)
		ИЛИ 
		(ВТ_Приход.Товар = ВТ_Расход.Товар)) 







